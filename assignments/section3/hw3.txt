(* 1 *)
fun only_capitals strings = List.filter (fn string => Char.isUpper(String.sub(string, 0))) strings
(* 2 *)
fun longest_string1 strings = 
    List.foldl (fn (s1, s2) => if String.size s1 > String.size s2 then s1 else s2) "" strings
(* 3 *)
fun longest_string2 strings = 
    List.foldl (fn (s1, s2) => if String.size s1 >= String.size s2 then s1 else s2) "" strings
(* 4 *) 
fun longest_string_helper f (strings : string list) =
    List.foldl (fn (s1, s2) => if f(String.size s1, String.size s2) then s1 else s2) "" strings
val longest_string3 = longest_string_helper (fn (x, y) => x > y)
val longest_string4 = longest_string_helper (fn (x, y) => x >= y)
(* 5 *)
val longest_capitalized =
    longest_string1 o only_capitals
(* 6 *)
val rev_string =
    String.implode o List.rev o String.explode
(* 7 *)
exception NoAnswer
fun first_answer f values = 
    case values of
	[] => raise NoAnswer
      | v::values' => case f v of 
			NONE => first_answer f values'
		     | SOME v => v
(* 8 *)
fun all_answers f values =
    let fun aux (values, acc) =
	    case values of
		[] => SOME acc
	      | v::values' => case f v of
				  NONE => NONE
				| SOME [v] => aux (values', [v] @ acc)
    in
	aux (values, [])
    end
(* 9 *)
datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern
datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu
fun g f1 f2 p = (* (unit -> int) -> (string -> int) -> pattern -> int *)
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end
(* 9a *)
val count_wildcards = g (fn _ => 1) (fn _ => 0)
(* 9b *)
val count_wild_and_variable_lengths = g (fn _ => 1) (fn s => String.size s)
(* 9c *)
fun count_some_var (s, v) =
    g (fn _ => 0) (fn x => if x = s then 1 else 0) v
